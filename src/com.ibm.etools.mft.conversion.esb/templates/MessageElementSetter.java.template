import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;

import org.w3c.dom.Document;

import com.ibm.broker.javacompute.MbJavaComputeNode;
import com.ibm.broker.plugin.MbElement;
import com.ibm.broker.plugin.MbException;
import com.ibm.broker.plugin.MbMessage;
import com.ibm.broker.plugin.MbMessageAssembly;
import com.ibm.broker.plugin.MbOutputTerminal;
import com.ibm.broker.plugin.MbUserException;
import com.ibm.broker.plugin.MbXMLNSC;


/* TODO - Use JAXB to generate Java classes to represent the message.
 * Import the package containing the generated Java classes
 *  
 * import my.jaxb.classes.*;
 */


public class {0} extends MbJavaComputeNode '{'

	protected static JAXBContext jaxbContext = null;
	
	/* TODO - replace "my.jaxb.classes" with the name of the package containing
	 * the Java classes generated by JAXB, then uncomment the line
	 */
	/* 
	 final String JAXB_PACKAGE = "my.jaxb.classes";
	 */

	/* TODO - remove the comments around the onInitialize() method 
	 * when JAXB_PACKAGE has been set to the correct value
	 */
	/*	
	public void onInitialize() throws MbException '{'
		try '{'
			// Initialize JAXB context with JAXB_PACKAGE
			// Java object classes that were generated by a Java Architecture for XML
			// Binding (JAXB) binding compiler  
			jaxbContext = JAXBContext.newInstance(JAXB_PACKAGE);
		} catch (JAXBException e) '{'
			// This exception will cause the deploy of this Java compute node to fail
			//  Typical cause is the JAXB package above is not available
			throw new MbUserException(this, "onInitialize()", "", "",
					e.toString(), null);
		}
	}
	*/
	
	public void evaluate(MbMessageAssembly inAssembly) throws MbException '{'
		MbOutputTerminal out = getOutputTerminal("out");

		// obtain the input message data
		MbMessage inMessage = inAssembly.getMessage();

		// create a new empty output message
		MbMessage outMessage = new MbMessage();
		
		/* TODO - remove the following line when JAXB_PACKAGE has been set to the correct value
		 */
	    outMessage = new MbMessage(inMessage);
	    
		MbMessageAssembly outAssembly = new MbMessageAssembly(inAssembly,
				outMessage);

		// copy input message headers to the new output message
		/* TODO - uncomment the following line when JAXB_PACKAGE has been set to the correct value
		 */
		/*
		 copyMessageHeaders(inMessage, outMessage);
		 */

		try '{'
			// unmarshal the input message data from the Broker tree into your Java object classes
			/* TODO - replace "Object" with the name of the message object class, which
			 * should exist in the Java classes generated by JAXB, then uncomment
			 * these two lines
			 */
			/*
			Object inMsgJavaObj = 
				jaxbContext.createUnmarshaller().unmarshal(inMessage.getDOMDocument());
			*/

			// Copy the input message to the output message
			/* TODO - replace "Object" with the name of the message object class, which
			 * should exist in the Java classes generated by JAXB, then uncomment
			 * this line
			 */
			/*
			Object outMsgJavaObj = inMsgJavaObj;
			*/
			
			
			/* TODO - Insert code to update the message as defined by the actions in the
			 * Message Element Setter primitive. 
			 * 
			 * Use the setters and getters from the Java classes generated by JAXB
			 */
			{1}
						
			// End of user Java object processing
			// ----------------------------------------------------------

			// Set the XMLNSC Broker domain for the output message
			/* TODO - uncomment the following line when JAXB_PACKAGE has been set to the correct value
			 */
			/*
			Document outDocument = outMessage.createDOMDocument(MbXMLNSC.PARSER_NAME);
			*/
			
			// Marshal the updated output Java object class into the Broker tree
			/* TODO - uncomment the following line when JAXB_PACKAGE has been set to the correct value
			 */
			/*
			jaxbContext.createMarshaller().marshal(outMsgJavaObj, outDocument);
			*/

			// Propagate the message to the node''s ''out'' terminal
			out.propagate(outAssembly);
		} catch (Exception e) '{'
			// Example Exception handling	
			throw new MbUserException(this, "evaluate()", "", "", e.toString(),
					null);
		}
	}

	public void copyMessageHeaders(MbMessage inMessage, MbMessage outMessage)
			throws MbException '{'
		MbElement outRoot = outMessage.getRootElement();

		// iterate though the headers starting with the first child of the root
		// element and stopping before the last child (message body)
		MbElement header = inMessage.getRootElement().getFirstChild();
		while (header != null && header.getNextSibling() != null) '{'
			// copy the header and add it to the out message
			outRoot.addAsLastChild(header.copy());
			// move along to next header
			header = header.getNextSibling();
		}
	}

}
